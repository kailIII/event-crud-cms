{"version":3,"sources":["../src/index.js"],"names":["app","use","set","json","urlencoded","extended","static","join","__dirname","get","req","res","sendfile","sendStatus","next","err","Error","status","code","message","debug","port","normalizePort","process","env","PORT","server","createServer","listen","address","console","log","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","exit","addr"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\r\nimport debuglib from 'debug';\r\nimport http from 'http';\r\nimport cors from 'cors';\r\nimport logger from 'morgan';\r\nimport path from 'path';\r\nimport bodyParser from 'body-parser';\r\nimport routes from './routes/api';\r\n\r\nlet app = express();\r\n\r\n// allow cross origin resource sharing\r\napp.use(cors());\r\n\r\napp.set('secret', 'SECRET');\r\n\r\n// setup\r\napp.use(logger('dev'));\r\napp.use(bodyParser.json());\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\napp.use(express.static(path.join(__dirname, 'public')));\r\n\r\n// Routing\r\napp.get('/', function(req, res) {\r\n\tres.sendfile('public/index.html');\r\n});\r\napp.get('/favicon.ico', function(req, res) { // handle annoying favicon requests\r\n\tres.sendStatus(204); // \"No Content\"\r\n});\r\napp.use('/api', routes);\r\n\r\n// catch 404 and forward to error handler\r\napp.use((req, res, next) => {\r\n\tlet err = new Error('Not Found');\r\n\terr.status = 404;\r\n\tnext(err);\r\n});\r\n\r\n// error handlers\r\napp.use((err, req, res, next) => {\r\n\tres.status(err.code || 500)\r\n\t\t.json({\r\n\t\t\tstatus: 'error',\r\n\t\t\tmessage: err\r\n\t\t});\r\n});\r\n\r\nconst debug = debuglib('cadre-test:server');\r\n\r\nconst port = normalizePort(process.env.PORT || '3000');\r\napp.set('port', port);\r\n\r\nlet server = http.createServer(app);\r\n\r\nserver.listen(port, () => {\r\n\t// destructuring\r\n\tconst {address, port} = server.address();\r\n\r\n\t// string interpolation\r\n\tconsole.log(`Started backend on port ${port}`);\r\n});\r\nserver.on('error', onError);\r\nserver.on('listening', onListening);\r\n\r\nfunction normalizePort(val) {\r\n\tconst port = parseInt(val, 10);\r\n\r\n\tif (isNaN(port)) {\r\n\t\t// named pipe\r\n\t\treturn val;\r\n\t}\r\n\r\n\tif (port >= 0) {\r\n\t\t// port number\r\n\t\treturn port;\r\n\t}\r\n\r\n\treturn false;\r\n}\r\nfunction onError(error) {\r\n\tif (error.syscall !== 'listen') {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tconst bind = typeof port === 'string'\r\n\t\t? 'Pipe ' + port\r\n\t\t: 'Port ' + port;\r\n\r\n\t// handle specific listen errors with friendly messages\r\n\tswitch (error.code) {\r\n\t\tcase 'EACCES':\r\n\t\t\tconsole.error(bind + ' requires elevated privileges');\r\n\t\t\tprocess.exit(1);\r\n\t\t\tbreak;\r\n\t\tcase 'EADDRINUSE':\r\n\t\t\tconsole.error(bind + ' is already in use');\r\n\t\t\tprocess.exit(1);\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow error;\r\n\t}\r\n}\r\nfunction onListening() {\r\n\tconst addr = server.address();\r\n\tconst bind = typeof addr === 'string'\r\n\t\t? 'pipe ' + addr\r\n\t\t: 'port ' + addr.port;\r\n\tdebug('Listening on ' + bind);\r\n}\r\n\r\nexport default app;"]}