{"version":3,"sources":["../../src/models/index.js"],"names":["env","process","NODE_ENV","sequelize","models","sync","force","readdirSync","__dirname","filter","file","endsWith","forEach","fullPath","join","console","log","model","import","name","Object","keys","modelName","associate","Sequelize","dynLoadModules","filepath","lstat","err","stat","isDirectory","readdir","files","f","l","length","i","basename","defineCall","require","default","mockDataDir"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC;AACA,IAAMC,YAAY,wBAAc,sDAAd,CAAlB;AACA,IAAIC,SAAS,EAAb;;AAEAD,UAAUE,IAAV,CAAe,EAACC,OAAO,KAAR,EAAf;;AAEA,aAAGC,WAAH,CAAeC,SAAf,EACEC,MADF,CACS,UAASC,IAAT,EAAe;AACtB,QAAQA,KAAKC,QAAL,CAAc,KAAd,CAAD,IAA2BD,SAAS,UAA3C;AACA,CAHF,EAIEE,OAJF,CAIU,UAASF,IAAT,EAAe;AACvB,KAAMG,WAAW,eAAKC,IAAL,CAAUN,SAAV,EAAqBE,IAArB,CAAjB;AACAK,SAAQC,GAAR,CAAY,uCAAuCH,QAAnD;AACA,KAAMI,QAAQd,UAAUe,MAAV,CAAiBL,QAAjB,CAAd;AACA;AACAT,QAAOa,MAAME,IAAb,IAAqBF,KAArB;AACA,CAVF;;AAYAG,OAAOC,IAAP,CAAYjB,MAAZ,EAAoBQ,OAApB,CAA4B,UAASU,SAAT,EAAoB;AAC/C,KAAI,eAAelB,OAAOkB,SAAP,CAAnB,EAAsC;AACrClB,SAAOkB,SAAP,EAAkBC,SAAlB,CAA4BnB,MAA5B;AACA;AACD,CAJD;;AAMAA,OAAOD,SAAP,GAAmBA,SAAnB;AACAC,OAAOoB,SAAP;;AAEA;AACA,SAASC,cAAT,CAAwBC,QAAxB,EAAkC;AACjC,cAAGC,KAAH,CAASD,QAAT,EAAmB,UAASE,GAAT,EAAcC,IAAd,EAAoB;AACtC,MAAIA,KAAKC,WAAL,EAAJ,EAAwB;AACvB;AACA,gBAAGC,OAAH,CAAWL,QAAX,EAAqB,UAASE,GAAT,EAAcI,KAAd,EAAqB;AACzC,QAAIC,UAAJ;AACA,QAAMC,IAAIF,MAAMG,MAAhB;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,CAApB,EAAuBE,GAAvB,EAA4B;AAC3BH,SAAI,eAAKnB,IAAL,CAAUY,QAAV,EAAoBM,MAAMI,CAAN,CAApB,CAAJ;AACAX,oBAAeQ,CAAf;AACA;AACD,IAPD;AAQA,GAVD,MAUO;AACN;AACA;AACA,OAAMX,YAAY,eAAKe,QAAL,CAAcX,QAAd,EAAwB,KAAxB,CAAlB;AACA;AACA,OAAMT,QAAQb,OAAOkB,SAAP,CAAd;AACA,OAAIL,SAAS,IAAb,EAAmB;AAClBF,YAAQC,GAAR,CAAY,+BAA+BU,QAA3C;AACA,QAAIY,aAAaC,QAAQb,QAAR,CAAjB;AACA,QAAI,QAAOY,UAAP,yCAAOA,UAAP,OAAsB,QAA1B,EAAoC;AACnC;AACAA,kBAAaA,WAAWE,OAAxB;AACA;AACD;AACA;AACAF,eAAWrB,KAAX;AACA;AACD;AACD,EA7BD;AA8BA;AACDF,QAAQC,GAAR,CAAY,IAAZ;AACA,IAAIyB,cAAc,eAAK3B,IAAL,CAAUN,SAAV,EAAqB,UAArB,CAAlB;AACA;;;kBAGeJ,M","file":"index.js","sourcesContent":["import fs from 'fs';\r\nimport path from 'path';\r\nimport Sequelize from 'sequelize';\r\n\r\nconst env = process.env.NODE_ENV || \"development\";\r\nconst sequelize = new Sequelize('postgres://postgres:password@localhost:5432/event_db');\r\nlet models = {};\r\n\r\nsequelize.sync({force: false});\r\n\r\nfs.readdirSync(__dirname)\r\n\t.filter(function(file) {\r\n\t\treturn (file.endsWith(\".js\")) && (file !== \"index.js\");\r\n\t})\r\n\t.forEach(function(file) {\r\n\t\tconst fullPath = path.join(__dirname, file);\r\n\t\tconsole.log(\"Importing table settings found in \" + fullPath);\r\n\t\tconst model = sequelize.import(fullPath);\r\n\t\t//console.log(\"model.name = \" + model.name);\r\n\t\tmodels[model.name] = model;\r\n\t});\r\n\r\nObject.keys(models).forEach(function(modelName) {\r\n\tif (\"associate\" in models[modelName]) {\r\n\t\tmodels[modelName].associate(models);\r\n\t}\r\n});\r\n\r\nmodels.sequelize = sequelize;\r\nmodels.Sequelize = Sequelize;\r\n\r\n// Load any mock data\r\nfunction dynLoadModules(filepath) {\r\n\tfs.lstat(filepath, function(err, stat) {\r\n\t\tif (stat.isDirectory()) {\r\n\t\t\t// we have a directory: do a tree walk\r\n\t\t\tfs.readdir(filepath, function(err, files) {\r\n\t\t\t\tlet f;\r\n\t\t\t\tconst l = files.length;\r\n\t\t\t\tfor (var i = 0; i < l; i++) {\r\n\t\t\t\t\tf = path.join(filepath, files[i]);\r\n\t\t\t\t\tdynLoadModules(f);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t//console.log(\"dynLoadModules: filepath = \" + filepath);\r\n\t\t\t// we have a file: load it\r\n\t\t\tconst modelName = path.basename(filepath, '.js');\r\n\t\t\t//console.log(\"dynLoadModules: modelName = \" + modelName);\r\n\t\t\tconst model = models[modelName];\r\n\t\t\tif (model != null) {\r\n\t\t\t\tconsole.log(\"Adding mock data found in \" + filepath);\r\n\t\t\t\tlet defineCall = require(filepath);\r\n\t\t\t\tif (typeof defineCall === 'object') {\r\n\t\t\t\t\t// Babel/ES6 module compatability\r\n\t\t\t\t\tdefineCall = defineCall.default;\r\n\t\t\t\t}\r\n\t\t\t\t//console.log(\"defineCall = \" + defineCall);\r\n\t\t\t\t//console.log(\"model = \" + model);\r\n\t\t\t\tdefineCall(model);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\nconsole.log(\"\\n\");\r\nvar mockDataDir = path.join(__dirname, 'mockdata');\r\n//dynLoadModules(mockDataDir);\r\n\r\n\r\nexport default models;"]}